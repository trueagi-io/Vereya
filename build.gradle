plugins {
	id 'fabric-loom' version '1.2-SNAPSHOT'
	id 'maven-publish'
	id("com.github.bjornvester.xjc") version "1.6.0"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

version = "0.1.4"
archivesBaseName = project.archives_base_name + '-fabric_' + project.fabric_version
group = project.maven_group


// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	implementation "org.glassfish.jaxb:jaxb-runtime:3.0.2"
	implementation 'org.glassfish.jaxb:jaxb-xjc:3.0.1'
	implementation 'jakarta.xml.bind:jakarta.xml.bind-api:3.0.1'
	implementation 'jakarta.annotation:jakarta.annotation-api:2.0.0'
	implementation 'jakarta.activation:jakarta.activation-api:2.0.1'
	implementation 'org.json:json:20230227'

	xjc "org.glassfish.jaxb:jaxb-runtime:3.0.2"
	xjc 'org.glassfish.jaxb:jaxb-xjc:3.0.1'
	xjc 'jakarta.xml.bind:jakarta.xml.bind-api:3.0.1'
	xjc 'jakarta.annotation:jakarta.annotation-api:2.0.0'
	xjc 'jakarta.activation:jakarta.activation-api:2.0.1'
	xjc 'org.json:json:20230227'

	jar {
		from {
			configurations.compileClasspath.findAll { ((it.name.startsWith('jakarta') || it.name.startsWith('jaxb') || it.name.startsWith('istack')) &&
					it.name.endsWith('jar') || it.name.startsWith('json') && !it.name.contains('forge')) }.collect { zipTree(it) }
		}
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}
jar.duplicatesStrategy = 'WARN'

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

task createProperties(dependsOn: processResources) {
	doLast {
		new File("$buildDir/resources/main/version.properties").withWriter { w ->
			Properties p = new Properties()
			p['version'] = project.version.toString()
			p.store w, null
		}
	}
}

classes {
	dependsOn createProperties
}


xjc {
	xjcVersion.set("3.0.0")
}

gradle.taskGraph.whenReady {taskGraph ->
	println "Found task graph: " + taskGraph
	println "Found " + taskGraph.allTasks.size() + " tasks."
	taskGraph.allTasks.forEach { task ->
		println task
		task.dependsOn.forEach { dep ->
			println "  - " + dep
		}
	}
}

tasks.sourcesJar.dependsOn(tasks.named("xjc"))
